#!/usr/bin/env ruby
# encoding: utf-8

require 'font_format'

$root_dir = `git rev-parse --show-toplevel`.chomp
$externals_file = "#{$root_dir}/.gitexternals"
$ignore_file = "#{$root_dir}/.gitignore"
$configurations = {}

$sym_ok = "✓".green
$sym_uninit = "~".blue
$sym_error = "✗".red

def usage
  puts "Usage: git external add <repository-url> <path> <branch>"
  puts "   or: git external add <repository-url> <path> <commit#>"
  puts "   or: git external rm <path>"
  puts "   or: git external status"
  puts "   or: git external init [<name>]"
  puts "   or: git external update [<name>]"
  puts "   or: git external reset [<name>]"
  puts "   or: git external cmd '<command>'"
  puts "   or: git external list"
  puts "   or: git external heads"
end

def load_configuration
  if File.file? $externals_file
    lines = `git config -l -f #{$externals_file}`.split(/\n/)
    $configurations = {}
    lines.each do |line|
      if line =~ /^external\.([^$]+)\.([^=]+)=(.*)$/
        $configurations[$1.chomp] ||= {}
        $configurations[$1.chomp][$2.chomp] = $3.chomp
      end
    end
  end
end

def print_configuration
  $configurations.each do |name, config|
    puts "* #{name}"
    config.each do |key, value|
      puts "\t#{key}: #{value}"
    end
  end
end

def normalize_url(url)
  if url =~ /^\./
    origin_url = `git config --get remote.origin.url`.chomp

    # If url has no protocol...
    unless origin_url =~ /^\w+:\/\//
      if origin_url =~ /^([^:\/]+):([^:]+)/
        # ... then assume it's ssh
        origin_url = "ssh://#{$1}/#{$2}"
      end
    end

    require 'uri'
    uri = URI.parse URI.encode origin_url
    uri.path = File.expand_path(url, uri.path)
    uri.to_s
  else
    url
  end
end

# Check for uncommitted changes
def uncommitted_changes?(path)
    diffExit, diff = execute("cd #{path}; git diff-index --quiet HEAD")
    return ((diffExit == 1) ? true : false)
end

# Check for untracked files
def untracked_files?(path)
  untrackedExit, untracked = execute("cd #{path}; git ls-files --others --exclude-standard")
  return ((untrackedExit == 1 || untracked.length > 0) ? true : false)
end

# find how many commits we are ahead/behind our upstream
def ahead_behind_upstream(path, branch)
  upstreamExit, upstream = execute("cd #{path}; git rev-list --count --left-right origin/#{branch}...#{branch} 2> /dev/null")
  return "" if upstreamExit != 0
  behind, ahead = upstream.first.match(/^(\d*)\t(\d*)$/).captures
  my_str = ""
  if Integer(behind) > 0 || Integer(ahead) > 0
    my_str << "("
    my_str << "Ahead by #{ahead} commit" if Integer(ahead) == 1
    my_str << "Ahead by #{ahead} commits" if Integer(ahead) > 1
    my_str << ", " if Integer(ahead) > 0 && Integer(behind) > 0
    my_str << "Behind by #{behind} commit" if Integer(behind) == 1
    my_str << "Behind by #{behind} commits" if Integer(behind) > 1
    my_str << ")"
  end
  my_str
end

# Check if a branch exists
def branch_exists(path, branch)
    branches = `cd #{path}; git branch`
    regex = Regexp.new('[\\n\\s\\*]+' + Regexp.escape(branch.to_s) + '\\n')
    result = ((branches =~ regex) ? true : false)
    return result
end

# Check that a git repo exists in the given path
def repo_exists(path)
  require 'fileutils'
  return File.directory? "#{path}/.git"
end

def update_repo(path, branch, commit)
  # Create a local tracking branch if it doesn't exist already
  unless branch_exists(path, branch)
    puts "- Creating local tracking branch: #{branch} -> origin/#{branch}"
    system "cd #{path}; git branch #{branch} --track origin/#{branch}"
  end

  if commit == 'HEAD' or commit.nil?
    # Check out the local branch
    puts "- Checkout local branch: #{branch}"
    system "cd #{path}; git checkout #{branch}; git pull;"
  else
    puts "- Checkout local commit: #{commit}"
    system "cd #{path}; git fetch; git checkout #{commit};"
  end
end

def init_external(url, path, branch, commit)
  require 'fileutils'
  if repo_exists(path)
    puts "\t- Repository already exists"
  else
    FileUtils.makedirs File.dirname(path)
    url = normalize_url url
    system "git clone #{url} #{path}"
    update_repo(path, branch, commit)
  end
end

def update_external(url, path, branch, commit)
  if repo_exists(path)
    puts "- Updating #{path}"
    if uncommitted_changes?(path)
      puts "#{path} - uncommitted changes detected, can not update repository"
    else
      update_repo(path, branch, commit)
    end
  end
end

def get_default_head(path)
  if repo_exists(path)
    origin_head = `cd #{path}; git symbolic-ref refs/remotes/origin/HEAD`
    if origin_head =~ /refs\/remotes\/origin\/(.*)/
      $1
    else
      raise "#{path}: Can't determine default HEAD for origin remote"
    end
  end
end

def execute(cmd)
  values = []
  IO.popen(cmd) do |f|
    tmp = f.gets
    values.push(tmp.gsub(/\r/, '').gsub(/\n/, '')) unless tmp.nil?
  end
  return $?.exitstatus, values
end

def command_status
  ok = 0
  broken = 0
  uninitialised = 0

  puts "--------------------------------------------------"

  $configurations.each do |name, config|
    commit = config["commit"]
    branch = config["branch"]
    url = config["url"]
    path = config["path"]

    if !commit.nil? and !branch.nil?
      puts "  #{$sym_error} #{name} -- Amiguous definition: cannot specify "\
           "both #{"commit".italic} and #{"branch".italic} in .gitexternals"
      broken += 1
      next
    end

    if repo_exists(path)
      # Figure out the short name of the current branch
      headBranch = `cd #{path} && git rev-parse --abbrev-ref HEAD`.chomp
      revision = `cd #{path} && git rev-parse HEAD`.chomp

      changesString = (uncommitted_changes?(path) ? " (Uncommitted Changes)".brown : "")
      untrackedString = (untracked_files?(path) ? " (Untracked Files)".magenta : "")

      currentBranch = (headBranch == "HEAD" ? "[#{revision.slice(0..9)}...]" : "[#{headBranch}]")
      expectedBranch  = (branch.nil? ? "[#{commit.slice(0..9)}...]" : "[#{branch}]")

      upstream = ahead_behind_upstream(path, branch)

      gitRemoteExit, gitRemote = execute("cd #{path} && git config --get remote.origin.url")

      if gitRemote[0] != url
        puts "  #{$sym_error} #{name} URL=#{gitRemote[0]}, expected #{url}"
        broken += 1
      elsif (!branch.nil? and branch == headBranch) or (!commit.nil? and commit == revision)
        puts "  #{$sym_ok} #{name} #{currentBranch.cyan}#{changesString}#{untrackedString}"
        if upstream != ""
          puts "      --> #{upstream}"
        end
        ok += 1
      else
        puts "  #{$sym_error} #{name} #{currentBranch.red}#{changesString}#{untrackedString}, expected #{expectedBranch.cyan}"
        broken += 1
      end

    else
      puts "  #{$sym_uninit} #{name} #{"is not initialised".italic}"
      uninitialised +=1
    end

  end
  puts ""
  puts "#{broken > 0 ? $sym_error : $sym_ok} » #{ok} ok • #{broken} broken • #{uninitialised} uninitialised "
  puts "--------------------------------------------------"
end

def command_add(url, path, branch_or_commit='master')
  command_rm(path)
  `git config -f #{$externals_file} --add external.#{path}.path #{path}`
  `git config -f #{$externals_file} --add external.#{path}.url #{url}`
  if branch_or_commit.length != 40
    `git config -f #{$externals_file} --add external.#{path}.branch #{branch_or_commit}`
  else
    `git config -f #{$externals_file} --add external.#{path}.commit #{branch_or_commit}`
  end
  `echo "#{path}" >> #{$ignore_file}`
end

def command_rm(path)
  if File.file? $externals_file
    `git config -f #{$externals_file} --unset external.#{path}.path`
    `git config -f #{$externals_file} --unset external.#{path}.url`
    `git config -f #{$externals_file} --unset external.#{path}.branch`
    `git config -f #{$externals_file} --unset external.#{path}.commit`
    `git config -f #{$externals_file} --remove-section external.#{path} > /dev/null 2>&1`
    File.delete $externals_file if `wc -l #{$externals_file}`.chomp.to_i == 0
  end
  if File.file? $ignore_file
    # Remove entry from .gitignore file
    `perl -pi -e 's/\\Q#{path.gsub(/\//, '\/')}\\E\n//g' #{$ignore_file}`
  end
end

def command_list_default_heads
  $configurations.each do |name, config|
    if repo_exists(config["path"])
      puts "#{name}: #{get_default_head(config["path"])}"
    end
  end
end

def command_init(external_name)
  if external_name == "all"
    $configurations.each do |name, config|
      command_init_single name
    end
  else
    command_init_single external_name
  end
  command_status
end

def command_init_single(external_name)
  $configurations.each do |name, config|
    if name == external_name
      puts "Init: ~ #{name}"
      init_external(config["url"], config["path"],
                    config["branch"] || "master",
                    config["commit"] || "HEAD")
    end
  end
end

def command_update(external_name)
  if external_name == "all"
    $configurations.each do |name, config|
      command_update_single name
    end
  else
    command_update_single external_name
  end
  command_status
end

def command_update_single(external_name)
  $configurations.each do |name, config|
    if name == external_name and repo_exists(config["path"])
      puts "--------------------------------------------------"
      update_external(config["url"], config["path"],
                      config["branch"] || "master",
                      config["commit"] || "HEAD")
    end
  end
end

# Performs a `git reset --hard branch/commit` to reset all repos to what
# .gitexternals specifies
def command_reset(external_name)
  puts "Are you sure you want to reset <#{external_name}>? Unsaved changes will be lost. (yes/no)"
  answer = STDIN.gets.chomp
  unless answer == "yes" or answer == "y"
    return
  end

  if external_name == "all"
    $configurations.each do |name, config|
      command_reset_single name
    end
  else
    command_reset_single external_name
  end
  command_status
end

def command_reset_single(external_name)
  $configurations.each do |name, config|
    if name == external_name and repo_exists(config["path"])
        # Create a local tracking branch if it doesn't exist already
        commit = config["commit"]
        branch = config["branch"]
        if commit.nil? or commit == 'HEAD'
          # Check out the local branch
          puts "- Reset local branch [#{name}|#{branch}]:"
          system "cd #{config["path"]}; git reset --hard #{branch}; git checkout #{branch};"
        else
          puts "- Reset local commit [#{name}|#{commit.slice(0..9)}...]:"
          system "cd #{config["path"]}; git reset --hard #{commit}; git checkout #{commit};"
        end
    end
  end
end

def command_cmd(cmd)
  $configurations.each do |name, config|
    path = config['path']
    if repo_exists(path)
      system("echo #{path}; cd #{path}; #{cmd}")
      puts "--------------------------------------------------"
    end
  end
end

def command_list
  print_configuration
end

if $root_dir != `pwd`.chomp
  puts "Must execute 'git external' from root git directory: #{$root_dir}"
  exit
end

load_configuration

command=ARGV[0]

case command
when "status" then command_status
when "add" then command_add(ARGV[1], ARGV[2], ARGV[3] || "master")
when "rm" then command_rm ARGV[1]
when "init" then command_init ARGV[1] || "all"
when "update" then command_update ARGV[1] || "all"
when "reset" then command_reset ARGV[1] || "all"
when "cmd" then command_cmd ARGV[1]
when "list" then command_list
when "heads" then command_list_default_heads
else usage
end

